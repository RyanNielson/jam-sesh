<script type="text/javascript">
  function getRandomWholeNumber(min, max) { return Math.round(((Math.random() * (max - min)) + min)); };

  var audioBuffers = new Object();
  var audioContext;
  var pusher = new Pusher("<%= ENV['PUSHER_KEY'] %>");
  var pad_channel = pusher.subscribe('pads');
  //change to presenceChannel
  //subscribe with presence- (http://pusher.com/docs/client_api_guide/client_presence_channels#pusher-member-added)
  var presenceChannel = pusher.subscribe('presence-notes');

  presenceChannel.bind('pusher:subscription_succeeded', function() {
    presenceChannel.bind('client-note_played', function(data) {

      var random = false;
      // if(getRandomWholeNumber(1,25)==3){
      //   random = true;
      // }


      var top = (Math.random() * 100);
      var left = (Math.random() * 100);

      $item = $('<div>').addClass('visualize instrument-'+data.instrument+' note-' + data.note);
      $item.css({
        position: 'absolute',
        left: (left-getRandomWholeNumber(2,6)) + '%',
        top: (top+getRandomWholeNumber(2,6)) + '%'
      });
      // $image = $('<img>');
      // switch(parseInt(data.instrument)){
      //   case 0:
      //     $image.attr('src', "<%= asset_path('lma-0.png') %>");
      //     break;
      //   case 1:
      //     $image.attr('src', "<%= asset_path('lma-1.png') %>");
      //     break;
      //   case 2:
      //     $image.attr('src', "<%= asset_path('lma-2.png') %>");
      //     break;
      //   case 3:
      //     $image.attr('src', "<%= asset_path('lma-3.png') %>");
      //     break;
      //   case 4:
      //     $image.attr('src', "<%= asset_path('lma-4.png') %>");
      //     break;
      // }
      // if(random){
      //   $item.removeClass().addClass('visualize random');
      //   $image.attr('src', "<%= asset_path('random.png') %>");
      // }
      // $item.append($image);
      $('.container').append($item);

      $($item).animate({
        width: '60px',
        height: '60px',
        marginLeft: '-15px',
        marginTop: '-15px',
        top: top + '%',
        left: left + '%',
      }, getRandomWholeNumber(150, 400), function(){
        $(this).animate({
          top: '200%',
          left: (left + getRandomWholeNumber(10,20)) + '%'
        }, getRandomWholeNumber(2000, 5000), function(){
          $(this).remove();
        });
      });
      if(data.instrument == 4)
        data.decay = 0;
      if(random){
        playSound(audioContext, audioBuffers["random"], data.time, 0);
      }else{
        playSound(audioContext, audioBuffers["s" + data.instrument + "_" + data.note], data.time, data.decay);
      }
    });

    //member add
    presenceChannel.bind('pusher:member_added', function(member) {
      // console.log(presenceChannel.members.count);
    });

    //member removed
    presenceChannel.bind('pusher:member_removed', function(member) {
      // console.log(presenceChannel.members.count);
    });
  });

  pad_channel.bind('pad_change', function(data) {
    // window.oscillator1.frequency.value = 440 * Math.pow(Math.pow(2,data.pad),1/12)
    // window.oscillator2.frequency.value = 450 * Math.pow(Math.pow(2,data.pad),1/12)
    // window.oscillator3.frequency.value = 460 * Math.pow(Math.pow(2,data.pad),1/12)
    for(var i = 0; i<window.tones.length; i++){
      window.tones[i].osc.frequency.value = window.tones[i].freq * Math.pow(Math.pow(2,data.pad),1/12);
    }
  });

  window.onload = initAudio;
  
  function initAudio() {
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    audioContext = new AudioContext();

    var context = new webkitAudioContext();
      var vol = 0.25;

    window.tones = 
        [
            {
                type : 0,
                freq : 220,
                amp : 1 * vol
            },
            /*{
                type : 0,
                freq : 293.66,
                amp : 0.5 * vol
            },
            {
                type : 0,
                freq : 392.00,
                amp : 0.5 * vol
            },*/
            {
                type : 0,
                freq : 440,
                amp : 1 * vol
            },
            {
                type : 0,
                freq : 441,
                amp : 1 * vol
            },
            {
                type : 0,
                freq : 659.26,
                amp : 0.7 * vol
            },
            {
                type : 0,
                freq : 164.81,
                amp : 1.2 * vol
            },
            /*{
                type : 0,
                freq : 446,
                amp : 1 * vol
            },
            {
                type : 0,
                freq : 445,
                amp : 1 * vol
            },*/
            /*{
                type : 0,
                freq : 219,
                amp : 0.2 * vol
            },
            {
                type : 0,
                freq : 221,
                amp : 0.2 * vol
            },*/
            /*{
                type : 0,
                freq : 392.00,
                amp : 0.5 * vol
            },*/
            {
                type : 0,
                freq : 55,
                amp : 0.25 * vol
            }
        ];

    window.filter = context.createBiquadFilter();
    window.filter.type = 'bandpass';
    window.filter.connect(context.destination);
    for(var i = 0; i<tones.length; i++){
        tones[i].osc = context.createOscillator();
        tones[i].osc.type = tones[i].type;
        tones[i].osc.frequency.value = tones[i].freq;
        tones[i].gain = context.createGain();
        //tones[i].gain.connect(context.destination);
        
        tones[i].gain.connect(window.filter);

        //tones[i].gain.gain.value = tones[i].amp;
        tones[i].gain.gain.value = 0;
        tones[i].osc.connect(tones[i].gain);
        //tones[i].osc.connect(window.filter);
        tones[i].osc.start(0);

        /*tones[i].delay = context.createDelayNode();
        tones[i].delay.delayTime.value = 0.5;
        tones[i].gain.connect(tones[i].delay);
        tones[i].delayGain = context.createGainNode();
        tones[i].delayGain.gain.value = 1;
        tones[i].delay.connect(tones[i].delayGain);
        tones[i].delayGain.connect(window.filter);*/
    }

    var c = 0;
    var d = 0;
    var cSteps = 20;
    var keyPressed = false;
    var notes = [0, 0, 0, 4, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5, 5, 2];
    $('body').keydown(function(e){
      if(e.keyCode==32)
        keyPressed = true;
    }).keyup(function(e){
      if(e.keyCode==32)
        keyPressed = false;
    });

    


    setInterval(function(){
      if(keyPressed){
        c++;
      }else{
        c--;
      }
      if(c<0)
        c=0;
      if(c>cSteps)
        c=cSteps;
      

      for(var i = 0; i<tones.length; i++){
        //console.log(tones[i].currentGain);
        tones[i].osc.frequency.value = tones[i].freq * Math.pow(Math.pow(2,notes[d]),1/12);

        tones[i].gain.gain.value = tones[i].amp * (c/cSteps);
      }

      d++
      if(d>=notes.length)
        d=0;
    }, 1000);

    
    var context = new webkitAudioContext();

    var bufferLoader = new BufferLoader(
      audioContext,
      {
        s0_0: "<%= asset_path('i0/s0.mp3') %>",
        s0_1: "<%= asset_path('i0/s1.mp3') %>",
        s0_2: "<%= asset_path('i0/s2.mp3') %>",
        s0_3: "<%= asset_path('i0/s3.mp3') %>",
        s0_4: "<%= asset_path('i0/s4.mp3') %>",
        s0_5: "<%= asset_path('i0/s5.mp3') %>",

        s1_0: "<%= asset_path('i1/s0.mp3') %>",
        s1_1: "<%= asset_path('i1/s1.mp3') %>",
        s1_2: "<%= asset_path('i1/s2.mp3') %>",
        s1_3: "<%= asset_path('i1/s3.mp3') %>",
        s1_4: "<%= asset_path('i1/s4.mp3') %>",
        s1_5: "<%= asset_path('i1/s5.mp3') %>",

        s2_0: "<%= asset_path('i2/s0.mp3') %>",
        s2_1: "<%= asset_path('i2/s1.mp3') %>",
        s2_2: "<%= asset_path('i2/s2.mp3') %>",
        s2_3: "<%= asset_path('i2/s3.mp3') %>",
        s2_4: "<%= asset_path('i2/s4.mp3') %>",
        s2_5: "<%= asset_path('i2/s5.mp3') %>",

        s3_0: "<%= asset_path('i3/s0.mp3') %>",
        s3_1: "<%= asset_path('i3/s1.mp3') %>",
        s3_2: "<%= asset_path('i3/s2.mp3') %>",
        s3_3: "<%= asset_path('i3/s3.mp3') %>",
        s3_4: "<%= asset_path('i3/s4.mp3') %>",
        s3_5: "<%= asset_path('i3/s5.mp3') %>",

        s4_0: "<%= asset_path('i4/s0.mp3') %>",
        s4_1: "<%= asset_path('i4/s1.mp3') %>",
        s4_2: "<%= asset_path('i4/s2.mp3') %>",
        s4_3: "<%= asset_path('i4/s3.mp3') %>",
        s4_4: "<%= asset_path('i4/s4.mp3') %>",
        s4_5: "<%= asset_path('i4/s5.mp3') %>",

        random: "<%= asset_path('random.mp3') %>",        
      },
      finishedLoading
      );

    bufferLoader.load();
  }

  function finishedLoading(bufferList) {
    for (var key in bufferList){
      audioBuffers[key] = bufferList[key];
    }
  }
</script>

<!-- <span class="line pink">&nbsp;</span>
<span class="line purple">&nbsp;</span>
<span class="line blue">&nbsp;</span>
<span class="line green">&nbsp;</span> -->
